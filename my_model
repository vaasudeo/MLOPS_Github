@app.route('/api/test', methods=['GET'])
def test():
  //  #Creating array for input testing
      a=[14,3,2.8,25,100,2,1,0.5,1.5,8,0.8,1.5,850]
  //
   
   print("Hello world!Python model works!") 

   import pandas as pd
   import numpy as np
   from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
   from sklearn import datasets
   import matplotlib.pyplot as plt
   get_ipython().run_line_magic('matplotlib', 'inline')

   filename = 'C:/Users/vaasu/OneDrive/Desktop/Term 6/wine.xlsx'
   df = pd.read_excel(filename)

   X = df.iloc[:, 0:13].values
   y = df.iloc[:, 13].values

   # fitting the LDA model
      lda = LDA(n_components=2)
      lda_X = lda.fit(X,y).transform(X)

      plt.scatter(lda_X[y == 1, 0], lda_X[y == 1, 1], s =80, c = 'orange', label = 'Type 0')
      plt.scatter(lda_X[y == 2, 0], lda_X[y == 2, 1], s =80,  c = 'yellow', label = 'Type 1')
      plt.scatter(lda_X[y == 3, 0], lda_X[y == 3, 1], s =80,  c = 'green', label = 'Type 2')
      plt.title('LDA plot for Wine Dataset')
      plt.legend()

   # Splitting the dataset into the Training set and Test set
      from sklearn.model_selection import train_test_split
      X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

   # Feature Scaling
      from sklearn.preprocessing import StandardScaler
      sc = StandardScaler()
      X_train = sc.fit_transform(X_train)
      X_test = sc.transform(X_test)
      print(X_train.shape,X_test.shape)

# Applying LDA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
lda = LDA(n_components = 2)
X_train = lda.fit_transform(X_train, y_train)
X_test = lda.transform(X_test)
print(X_train.shape,X_test.shape)

# Fitting Logistic Regression to the Training set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)
y_pred

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

# Visualising the Training set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)
plt.title('Logistic Regression (Training set)')
plt.xlabel('LD1')
plt.ylabel('LD2')
plt.legend()
plt.show()

# Visualising the Test set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)
plt.title('Logistic Regression (Test set)')
plt.xlabel('LD1')
plt.ylabel('LD2')
plt.legend()
plt.show()

#Creating array for input testing
a=[14,3,2.8,25,100,2,1,0.5,1.5,8,0.8,1.5,850]

a=np.array(a)


a=a.reshape(-1,1)
a=np.transpose(a)
a.shape

a_scaled=sc.fit_transform(a)
a_lda=lda.transform(a_scaled)

prediction= classifier.predict(a_lda)

prediction

    # encode response using jsonpickle
    response_pickled = jsonpickle.encode(response)
